import _ from 'lodash';

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
// By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed 
// four million, find the sum of the even-valued terms.

// for purposes of problem assuming 4m
export default function problem(args = { max: 4000000 }) {
  return fibSum(args);
};

export function fibSum(args = {}) {
  const { 
    //  the generic use of named should do nothing
    count = 0,
    max = 0
  } = args;

  return count < max ? 
    fibSum(update(args)) :
    count;
}

function nextFib(prev = 0, current = 1) {
  return prev + current;
}

function update(args) {
  return updateCount(updateCurrentAndPrevious(args));
}

function updateCount(args) {
  const current = args.current;
  const count = args.count || 0;
  const newCount = 
    isEven(current) ?
      count + current :
      count;

  return {
    ...args,
    count: newCount
  };
}

function updateCurrentAndPrevious(args) {
  return {
    ...args,
    current: nextFib(args.previous, args.current),
    previous: args.current
  };
}


function isEven(num) {
  return num % 2 === 0;
}
